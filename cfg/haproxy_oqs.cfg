global
#    maxconn 50000
    maxconn 500
#    cpu-map auto:1/1-4 0-3
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    log stdout local0 debug

defaults
    timeout connect 15s
    timeout client 45s
    timeout server 45s
    log global
    option httplog
    option tcplog
    mode http
    maxconn 3000

listen stats
    bind *:8484
    stats enable
    stats uri /
    stats refresh 5s

frontend oqs_haproxy
    bind :8088
    # set any quantum-safe KEM algorithm in the curves parameter, e.g. frodo640aes;
    # we also add client verification: their keys must be signed by our CA
    bind :4433 ssl crt sphincs_server.pem curves frodo640aes verify required ca-file ca_sphincs.crt

## routing based on Host header
  acl host_ws hdr_beg(Host) -i ws.
  use_backend bk_ws if host_ws
## routing based on websocket protocol header
  acl hdr_connection_upgrade hdr(Connection)  -i Upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)     -i websocket
  use_backend bk_ws if hdr_connection_upgrade hdr_upgrade_websocket


#backend bk_web                                                   
#  balance roundrobin                                             
#  option httpchk HEAD /                                          
#  server websrv1 127.0.0.1:4444 maxconn 100 weight 10 cookie websrv1 check

backend bk_ws
  balance roundrobin
## websocket protocol validation
  acl hdr_connection_upgrade hdr(Connection)                 -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)                    -i websocket
  acl hdr_websocket_key      hdr_cnt(Sec-WebSocket-Key)      eq 1
  acl hdr_websocket_version  hdr_cnt(Sec-WebSocket-Version)  eq 1
  http-request deny if ! hdr_connection_upgrade ! hdr_upgrade_websocket ! hdr_websocket_key ! hdr_websocket_version
## ensure our application protocol name is valid 
## (don't forget to update the list each time you publish new applications)
#--  acl ws_valid_protocol hdr(Sec-WebSocket-Protocol) echo-protocol
#--  http-request deny if ! ws_valid_protocol
## websocket health checking (does it work?)
#  option httpchk GET / HTTP/1.1\r\nHost:\ localhost\r\nConnection:\ Upgrade\r\nUpgrade:\ websocket\r\nSec-WebSocket-Key:\ haproxy\r\nSec-WebSocket-Version:\ 13\r\nSec-WebSocket-Protocol:\ echo-protocol
#  http-check expect status 101
  server websrv1 127.0.0.1:4444 maxconn 30000 weight 10 cookie websrv1 check
#  server websrv1 127.0.0.1:4444 maxconn 30000 weight 10 cookie websrv1 check inter 300s fall 2
