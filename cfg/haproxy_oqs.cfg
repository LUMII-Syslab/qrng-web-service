global
    maxconn 1000
    ssl-default-bind-ciphers AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.3 no-tls-tickets
    log stdout local0 debug

defaults
    timeout connect 15s
    timeout client 45s
    timeout server 45s
    log global
    option tcplog
    mode http

listen stats
    bind *:8484
    stats enable
    stats uri /
    stats refresh 5s

frontend oqs_haproxy
    # set any PQC KEM algorithm in the "curves" parameter, e.g.: frodo640aes
    # we also add client verification: their keys must be signed by our CA
    bind :4433 ssl crt server.pem curves frodo640aes verify required ca-file ca.crt
## routing based on Host header
  acl host_ws hdr_beg(Host) -i ws.
  use_backend bk_ws if host_ws
## routing based on websocket protocol header
  acl hdr_connection_upgrade hdr(Connection)  -i Upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)     -i websocket
  use_backend bk_ws if hdr_connection_upgrade hdr_upgrade_websocket

backend bk_ws
  balance roundrobin
## websocket protocol validation:
  acl hdr_connection_upgrade hdr(Connection)                 -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)                    -i websocket
  acl hdr_websocket_key      hdr_cnt(Sec-WebSocket-Key)      eq 1
  acl hdr_websocket_version  hdr_cnt(Sec-WebSocket-Version)  eq 1
  http-request deny if ! hdr_connection_upgrade ! hdr_upgrade_websocket ! hdr_websocket_key ! hdr_websocket_version
## QRNG backend server:
  server websrv1 127.0.0.1:4444 maxconn 1000 weight 10 cookie websrv1 check
