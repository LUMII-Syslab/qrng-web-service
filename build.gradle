plugins {
    id 'java'
    id 'application'
}

repositories {
      mavenCentral()
}

compileJava.options.encoding = "UTF-8"

dependencies {
    /* Warning: do not use log4j < 2.16 because if a serious (10 of 10 points) vulnerability! */
    implementation 'org.slf4j:slf4j-api:2.+'
    implementation 'org.slf4j:slf4j-simple:2.+'

    // gson
    implementation 'com.google.code.gson:gson:2.9.+'

    // cactoos (for pure OOP)
    implementation 'org.cactoos:cactoos:0.+'

    // jetty server
    implementation 'org.eclipse.jetty:jetty-server:11.+'
    implementation 'org.eclipse.jetty:jetty-servlet:11.+'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:5.+'

    implementation 'org.eclipse.jetty:jetty-webapp:11.+'
    implementation 'org.eclipse.jetty:jetty-proxy:11.+'
    implementation 'org.eclipse.jetty.websocket:websocket-jetty-server:11.+'
    implementation 'org.eclipse.jetty.websocket:websocket-jetty-client:11.+'
}

test {
    useJUnitPlatform()
}

static def getOsName() {
    final String osName = System.getProperty("os.name").toLowerCase()

    if (osName.contains("linux")) {
        return ("Linux")
    } else if (osName.contains("windows")) {
        return ("Windows_NT") // as %OS%
    }
    return ("Unsupported OS by the IQD Quantis QRNG device")
}

static def getOsArch() {
   return System.properties['os.arch']
    // in x86_64 Windows, this returns amd64, which is ok, since in Windows, %PROCESSOR_ARCHITECTURE%=AMD64 and the case does not matter
}

def JAVA_LIBRARY_PATH_PLACEHOLDER=projectDir.toPath().resolve("dll").resolve(getOsName()+'-'+getOsArch()).toString().replaceAll("\\\\", "/")
// ^^^ this placeholder is used as applicationDefaultJvmArgs when invoking: gradle run

application {
    mainClass.set("lv.lumii.qrng.Main")
    applicationDefaultJvmArgs = ['-Djava.library.path='+JAVA_LIBRARY_PATH_PLACEHOLDER]
}


startScripts {
    applicationName = 'qrng-web-service'
    doLast {
        unixScript.text = unixScript.text.replace(JAVA_LIBRARY_PATH_PLACEHOLDER, '\$APP_HOME/`uname -s`-`uname -m`')
        windowsScript.text = windowsScript.text.replace(JAVA_LIBRARY_PATH_PLACEHOLDER, '%APP_HOME%\\dll\\%OS%-%PROCESSOR_ARCHITECTURE%')
    }
}

installDist {
    doLast {
        println "Copying native DLLs/libraries into the distribution"
        copy {
          from(projectDir)
          into(destinationDir)          
          include("dll/**")
        }
    }
}
/*installDist {
    into(distDirName)
    dependsOn startScripts
}*/

run {
    //args 'arg'
    final String libPath = projectDir.toPath().resolve("dll").resolve(getOsName()+'-'+getOsArch())
    doFirst {
       jvmArgs '-Djava.library.path='+libPath+' '+
                '-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG'
       applicationDefaultJvmArgs = jvmArgs
       systemProperty('java.library.path',libPath)
    }   
       jvmArgs '-Djava.library.path='+libPath+' '+
                '-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG'
       applicationDefaultJvmArgs = jvmArgs
       systemProperty('java.library.path',libPath)
}
